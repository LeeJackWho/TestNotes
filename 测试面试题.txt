25个经典面试题：
1、在搜索引擎中输入汉字就可以解析到对应的域名，请问如何用LoadRunner进行测试？
建立测试计划，确定测试标准和测试范围
设计典型场景的测试用例，覆盖常用业务流程和不常用的业务流程等。
根据测试用例，开发自动测试脚本和场景：
录制测试脚本：新建一个脚本（Web/HTML协议）；点击录制按钮，在弹出的对话框的URL中输入”about:blank”；在打开的浏览器中进行正常操作流程后，结束录制；调试脚本并保存，可能要注意到字符集的关联。
设置测试场景：针对性能设置测试场景，主要判断在正常情况下，系统的平均事务响应时间是否达标；针对压力负载设置测试场景，主要判断在长时间处于满负荷或者超出系统承载能力的条件下，系统是否会崩溃；执行测试，获取测试结果，分析测试结果。

2、试述软件的概念和特点？软件复用的含义？构件包括哪些？
软件是计算机系统中与硬件相互依存的另一部分，与计算机系统操作有关的计算机程序、规程、规则，以及可能有的文件、文档及数据。
软件复用(SoftWare Reuse)是将已有软件的各种有关知识用于建立新的软件，以缩减软件开发和维护的花费。软件复用是提高软件生产力和质量的一种重要技术。早期的软件复用主要是代码级复用，被复用的知识专指程序，后来扩大到包括领域知识、开发经验、设计决定、体系结构、需求、设计、代码和文档等一切有关方面。
可以被复用的软件成分一般称作可复用构件。

3、软件生存周期及其模型是什么？
软件生存周期（Software life cycle）又称为软件生命期，生存期。是指从形成开发软件概念起，所开发的软件使用以后，知道失去使用价值消亡为止的整个过程。一般来说，整个生存周期包括计划（定义）、开发、运行（维护）三个时期，每个时期又划分为若干个阶段。每个阶段有明确的任务。
　　周期模型（典型的几种）：
　　瀑布模型
　　快速原型模型：快速原型模型允许在需求分析阶段对软件的需求进行初步而非完全的分析和定义，快速设计开发出软件系统的原型，该原型向用户展示待开发软件的全部或部分功能和性能；用户对该原型进行测试评定，给出具体改进意见以丰富细化软件需求；开发人员据此对软件进行修改完善，直至用户满意认可之后，进行软件的完整实现及测试、维护。
　　迭代模型：迭代包括产生产品发布（稳定、可执行的产品版本）的全部开发活动和要使用该发布必需的所有其他外围元素。在某种程度上，开发迭代是一次 完整地经过所有工作流程的过程：需求分析、设计、实施和测试工作流程。实质上，它类似小型的瀑布式项目。RUP认为，所有的阶段都可以细分为迭代。每一次 的迭代都会产生一个可以发布的产品，这个产品是最终产品的一个子集。
　　生命周期阶段：
　　软件计划与可行性分析
　　需求分析
　　软件设计
　　编码
　　软件测试
　　运行与维护

4、什么是软件测试？软件测试的目的与原则
在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。
　　软件测试的目的：
　　测试是程序的执行过程，目的在于发现错误
　　一个成功的测试用例在于发现至今未发现的错误
　　一个成功的测试是发现了至今未发现的错误的测试
　　确保产品完成了它所承诺或公布的功能，并且用户可以访问到的功能都有明确的书面说明。
　　确保产品满足性能和效率的要求
　　确保产品是健壮的和适应用户环境的
　　软件测试的原则：
　　测试用例中一个必须部分是对预期输出或接过进行定义
　　程序员应避免测试自己编写的程序
　　编写软件的组织不应当测试自己编写的软件
　　应当彻底检查每个测试的执行结果
　　测试用例的编写不仅应当根据有效和预料到的输入情况，而且也应当根据无效和未预料到的输入情况
　　检擦程序是否“未做其应该做的”仅是测试的一半，测试的另一半是检查程序是否“做了其不应该做的”
　　应避免测试用例用后即弃，除非软件本身就是个一次性的软件
　　计划测试工作时不应默许假定不会发现错误
　　程序某部分存在更多错误的可能性，与该部分已经发现错误的数量成正比
　　软件测试是一项极富创造性，极具智力的挑战性的工作。

5、软件配置管理的作用？软件配置包括什么？
软件配置管理（Software Configuration Management，SCM）是一种标识、组织和控制修改的技术。软件配置管理应用于整个软件工程过程。在软件建立时变更是不可避免的，而变更加剧了项目中软件开发者之间的混乱。SCM活动的目标就是为了标识变更、控制变更、确保变更正确实现并向其他有关人员报告变更。从某种角度讲，SCM是一种标识、组织和控制修改的技术，目的是使错误降为最小并最有效地提高生产效率。
　　软件配置包括如下内容：配置项识别、工作空间管理、版本控制、变更控制、状态报告、配置审计

6、什么是软件质量？
概括地说，软件质量就是“软件与明确的和隐含的定义的需求相一致的程度”。具体地说，软件质量是软件符合明确叙述的功能和性能需求、文档中明确描述 的开发标准、以及所有专业开发的软件都应具有的隐含特征的程度。 影响软件质量的主要因素，这些因素是从管理角度对软件质量的度量。可划分为三组，分别反应用户在使用软件产品时的三种观点。正确性、健壮性、效率、完整性、可用性、风险（产品运行）；可理解性、可维修性、灵活性、可测试性（产品修改）；可移植性、可再用性、互运行性（产品转移）。

7、目前主要的测试用例设计方法是什么？
白盒测试：逻辑覆盖、循环覆盖、基本路径覆盖
黑盒测试：边界值分析法、等价类划分、错误猜测法、因果图法、状态图法、测试大纲法、随机测试、场景法

8、软件的安全性应从哪几个方面去测试？
软件安全性测试包括程序、数据库安全性测试。根据系统安全指标不同测试策略也不同。
用户认证安全的测试要考虑问题： 明确区分系统中不同用户权限 、系统中会不会出现用户冲突 、系统会不会因用户的权限的改变造成混乱 、用户登陆密码是否是可见、可复制 、是否可以通过绝对途径登陆系统（拷贝用户登陆后的链接直接进入系统）、用户退出系统后是否删除了所有鉴权标记，是否可以使用后退键而不通过输入口令进入 系统 、系统网络安全的测试要考虑问题 、测试采取的防护措施是否正确装配好，有关系统的补丁是否打上 、模拟非授权攻击，看防护系统是否坚固 、采用成熟的网络漏洞检查工具检查系统相关漏洞（即用最专业的黑客攻击工具攻击试一下，现在最常用的是 NBSI 系列和 IPhacker IP ） 、采用各种木马检查工具检查系统木马情况 、采用各种防外挂工具检查系统各组程序的外挂漏洞
数据库安全考虑问题： 系统数据是否机密（比如对银行系统，这一点就特别重要，一般的网站就没有太高要求）、系统数据的完整性（我刚刚结束的企业实名核查服务系统中就曾存在数据 的不完整，对于这个系统的功能实现有了障碍） 、系统数据可管理性 、系统数据的独立性 、系统数据可备份和恢复能力（数据备份是否完整，可否恢复，恢复是否可以完整）

9、什么是测试用例 什么是测试脚本 两者的关系是什么？
为实施测试而向被测试系统提供的输入数据、操作或各种环境设置以及期望结果的一个特定的集合。
测试脚本是为了进行自动化测试而编写的脚本。
测试脚本的编写必须对应相应的测试用例

10、简述什么是静态测试、动态测试、黑盒测试、白盒测试、α测试 β测试
静态测试是不运行程序本身而寻找程序代码中可能存在的错误或评估程序代码的过程。
　　动态测试是实际运行被测程序，输入相应的测试实例，检查运行结果与预期结果的差异，判定执行结果是否符合要求，从而检验程序的正确性、可靠性和有效性，并分析系统运行效率和健壮性等性能。
　　黑盒测试一般用来确认软件功能的正确性和可操作性,目的是检测软件的各个功能是否能得以实现,把被测试的程序当作一个黑盒,不考虑其内部结构,在知道该程序的输入和输出之间的关系或程序功能的情况下,依靠软件规格说明书来确定测试用例和推断测试结果的正确性。
　　白盒测试根据软件内部的逻辑结构分析来进行测试,是基于代码的测试，测试人员通过阅读程序代码或者通过使用开发工具中的单步调试来判断软件的质量，一般黑盒测试由项目经理在程序员开发中来实现。
　　α测试是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的受控测试，Alpha测试不能由程序员或测试员完成。
　　β测试是软件的多个用户在一个或多个用户的实际使用环境下进行的测试。开发者通常不在测试现场，Beta测试不能由程序员或测试员完成。

11、软件质量保证体系是什么 国家标准中与质量保证管理相关的几个标准是什么?他们的编号和全称是什么?
SQA由一套软件工程过程和方法组成，以保证（软件的）质量。SQA贯穿整个软件开发过程，(它)应包括需求文档评审、代码控制、代码评审、变更管理、配置管理、版本管理和软件测试。
软件质量保证（SQA-Software Quality Assurance）是建立一套有计划，有系统的方法，来向管理层保证拟定出的标准、步骤、实践和方法能够正确地被所有项目所采用。软件质量保证的目的是使软件过程对于管理人员来说是可见的。它通过对软件产品和活动进行评审和审计来验证软件是合乎标准的。软件质量保证组在项目开始时就一起参与建立计划、标准和过程。这些将使软件项目满足机构方针的要求。

12、软件产品质量特性是什么?
       功能性：适应性、准确性、互操作性、依从性、安全性。
　　可靠性：成熟性、容错性、易恢复性。
　　可使用性：易理解性、易学习性、易操作性。
　　效率：时间特性、资源特性。
　　可维护性：易分析性、易变更性、稳定性、易测试性。
　　可移植性： 适应性、易安装性、遵循性、易替换性

13、软件测试的策略是什么?
软件测试策略：在一定的软件测试标准、测试规范的指导下，依据测试项目的特定环境约束而规定的软件测试的原则、方式、方法的集合。

14、软件测试分为几个阶段 各阶段的测试策略和要求是什么?
和开发过程相对应，测试过程会依次经历单元测试、集成测试、系统测试、验收测试四个主要阶段：
单元测试：单元测试是针对软件设计的最小单位––程序模块甚至代码段进行正确性检验的测试工作，通常由开发人员进行。
集成测试：集成测试是将模块按照设计要求组装起来进行测试，主要目的是发现与接口有关的问题。由于在产品提交到测试部门前，产品开发小组都要进行联合调试，因此在大部分企业中集成测试是由开发人员来完成的。
系统测试：系统测试是在集成测试通过后进行的，目的是充分运行系统，验证各子系统是否都能正常工作并完成设计的要求。它主要由测试部门进行，是测试部门最大最重要的一个测试，对产品的质量有重大的影响。
验收测试：验收测试以需求阶段的《需求规格说明书》为验收标准，测试时要求模拟实际用户的运行环境。对于实际项目可以和客户共同进行，对于产品来说就是最后一次的系统测试。测试内容为对功能模块的全面测试，尤其要进行文档测试。
单元测试测试策略：
自顶向下的单元测试策略：比孤立单元测试的成本高很多，不是单元测试的一个好的选择。
自底向上的单元测试策略：比较合理的单元测试策略，但测试周期较长。
孤立单元测试策略：最好的单元测试策略。
集成测试的测试策略：
大爆炸集成：适应于一个维护型项目或被测试系统较小
自顶向下集成：适应于产品控制结构比较清晰和稳定；高层接口变化较小；底层接口未定义或经常可能被修改；产口控制组件具有较大的技术风险，需要尽早被验证；希望尽早能看到产品的系统功能行为。
自底向上集成：适应于底层接口比较稳定；高层接口变化比较频繁；底层组件较早被完成。
基于进度的集成
优点：具有较高的并行度；能够有效缩短项目的开发进度。
缺点：桩和驱动工作量较大；有些接口测试不充分；有些测试重复和浪费。
系统测试的测试策略：
数据和数据库完整性测试；功能测试；用户界面测试；性能评测；负载测试；强度测试；容量测试；安全性和访问控制测试；故障转移和恢复测试；配置测试；安装测试；加密测试；可用性测试；版本验证测试；文档测试

15、软件测试各个阶段通常完成什么工作？各个阶段的结果文件是什么？包括什么内容？
单元测试阶段：各独立单元模块在与系统地其他部分相隔离的情况下进行测试，单元测试针对每一个程序模块进行正确性校验，检查各个程序模块是否正确地实现了规定的功能。生成单元测试报告，提交缺陷报告。
集成测试阶段：集成测试是在单元测试的基础上，测试在将所有的软件单元按照概要设计规格说明的要求组装成模块、子系统或系统的过程中各部分工作是否达到或实现相应技术指标及要求的活动。该阶段生成集成测试报告，提交缺陷报告。
系统测试阶段：将通过确认测试的软件，作为整个给予计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行环境下，对计算机系统进行全面的功能覆盖。该阶段需要提交测试总结和缺陷报告。

16、测试人员在软件开发过程中的任务是什么？
       1、尽可能早的找出系统中的Bug；
　　2、避免软件开发过程中缺陷的出现；
　　3、衡量软件的品质，保证系统的质量；
　　4、关注用户的需求，并保证系统符合用户需求。
　　总的目标是：确保软件的质量。

17、在您以往的工作中，一条软件缺陷（或者叫Bug）记录都包含了哪些内容？如何提交高质量的软件缺陷（Bug）记录？
       一条Bug记录最基本应包含：
　　bug编号；
　　bug严重级别，优先级；
　　bug产生的模块；
　　首先要有bug摘要，阐述bug大体的内容；
　　bug对应的版本；
　　bug详细现象描述，包括一些截图、录像....等等；
　　bug出现时的测试环境，产生的条件即对应操作步骤；
　　高质量的Bug记录：
　　1) 通用UI要统一、准确
　　缺陷报告的UI要与测试的软件UI保持一致，便于查找定位。
　　2) 尽量使用业界惯用的表达术语和表达方法
　　使用业界惯用的表达术语和表达方法，保证表达准确，体现专业化。
　　3) 每条缺陷报告只包括一个缺陷
　　每条缺陷报告只包括一个缺陷，可以使缺陷修正者迅速定位一个缺陷，集中精力每次只修正一个缺陷。校验者每次只校验一个缺陷是否已经正确修正。
　　4) 不可重现的缺陷也要报告
　　首先缺陷报告必须展示重现缺陷的能力。不可重现的缺陷要尽力重现，若尽力之后仍不能重现，仍然要报告此缺陷，但在报告中要注明无法再现，缺陷出现的频率。
　　5) 明确指明缺陷类型
　　根据缺陷的现象，总结判断缺陷的类型。例如，即功能缺陷、界面缺陷、数据缺陷，合理化建议这是最常见的缺陷或缺陷类型，其他形式的缺陷或缺陷也从属于其中某种形式。
　　6) 明确指明缺陷严重等级和优先等级
　　时刻明确严重等级和优先等级之间的差别。高严重问题可能不值得解决，小装饰性问题可能被当作高优先级。
　　7) 描述 (Description) ，简洁、准确，完整，揭示缺陷实质，记录缺陷或缺陷出现的位置
　　描述要准确反映缺陷的本质内容，简短明了。为了便于在软件缺陷管理数据库中寻找制定的测试缺陷，包含缺陷发生时的用户界面（UI）是个良好的习惯。例如记录对话框的标题、菜单、按钮等控件的名称。
　　8) 短行之间使用自动数字序号，使用相同的字体、字号、行间距
　　短行之间使用自动数字序号，使用相同的字体、字号、行间距，可以保证各条记录格式一致，做到规范专业。
　　9) 每一个步骤尽量只记录一个操作
　　保证简洁、条理井然，容易重复操作步骤。
　　10) 确认步骤完整，准确，简短
　　保证快速准确的重复缺陷，“完整”即没有缺漏，“准确”即步骤正确，“简短”即没有多余的步骤。
　　11) 根据缺陷，可选择是否进行图象捕捉
　　为了直观的观察缺陷或缺陷现象，通常需要附加缺陷或缺陷出现的界面，以图片的形式作为附件附着在记录的“附件”部分。为了节省空间，又能真实反映缺陷或缺陷本质，可以捕捉缺陷或缺陷产生时的全屏幕，活动窗口和局部区域。为了迅速定位、修正缺陷或缺陷位置，通常要求附加中文对照图。
　　附加必要的特殊文档和个人建议和注解
　　如果打开某个特殊的文档而产生的缺陷或缺陷，则必须附加该文档，从而可以迅速再现缺陷或缺陷。有时，为了使缺陷或缺陷修正者进一步明确缺陷或缺陷的表现，可以附加个人的修改建议或注解。
　　12) 检查拼写和语法缺陷
　　在提交每条缺陷或缺陷之前，检查拼写和语法，确保内容正确，正确的描述缺陷。
　　13) 尽量使用短语和短句，避免复杂句型句式
　　软件缺陷管理数据库的目的是便于定位缺陷，因此，要求客观的描述操作步骤，不需要修饰性的词汇和复杂的句型，增强可读性。
　　以上概括了报告测试缺陷的规范要求，随着软件的测试要求不同，测试者经过长期测试，积累了相应的测试经验，将会逐渐养成良好的专业习惯，不断补充新的规范书写要求。此外，经常阅读、学习其他测试工程师的测试缺陷报告，结合自己以前的测试缺陷报告进行对比和思考，可以不断提高技巧。
　　14) 缺陷描述内容
　　缺陷描述的内容可以包含缺陷操作步骤，实际结果和期望结果。操作步骤可以方便开发人员再现缺陷进行修正，有些开发的再现缺陷能力很差，虽然他明白你所指的缺陷，但就是无法再现特别是对系统不熟悉的新加入开发人员，介绍步骤可以方便他们再现。实际结果可以让开发明白错误是什么，期望结果可以让开发了解正确的结果应该是如何。

18、黑盒测试和白盒测试是软件测试的两种基本方法，请分别说明各自的优点和缺点！
黑盒测试的优点有：比较简单，不需要了解程序内部的代码及实现；与软件的内部实现无关；  从用户角度出发，能很容易的知道用户会用到哪些功能，会遇到哪些问题；基于软件开发文档，所以也能知道软件实现了文档中的哪些功能；在做软件自动化测试时较为方便。
　　黑盒测试的缺点有：不可能覆盖所有的代码，覆盖率较低，大概只能达到总代码量的30%；自动化测试的复用性较低。
　　白盒测试的优点有：帮助软件测试人员增大代码的覆盖率，提高代码的质量，发现代码中隐    藏的问题。
　　白盒测试的缺点有：程序运行会有很多不同的路径，不可能测试所有的运行路径；测试基于代码，只能测试开发人员做的对不对，而不能知道设计的正确与否，可能会漏掉一些功能需求；系统庞大时，测试开销会非常大。

19、如何测试一个纸杯？
功能度：用水杯装水看漏不漏；水能不能被喝到
安全性：杯子有没有毒或细菌
可靠性：杯子从不同高度落下的损坏程度
可移植性：杯子在不同的地方、温度等环境下是否都可以正常使用
兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等
易用性：杯子是否烫手、是否有防滑措施、是否方便饮用
用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述
疲劳测试：将杯子盛上水（案例一）放24小时检查泄漏时间和情况；盛上汽油（案例二）放24小时检查泄漏时间和情况等
压力测试：用根针并在针上面不断加重量，看压强多大时会穿透

20、测试计划工作的目的是什么？测试计划文档的内容应该包括什么？其中哪些是最重要的？
       软件测试计划是指导测试过程的纲领性文件：
　　领导能够根据测试计划进行宏观调控，进行相应资源配置等
　　测试人员能够了解整个项目测试情况以及项目测试不同阶段的所要进行的工作等
　　便于其他人员了解测试人员的工作内容，进行有关配合工作
　　包含了产品概述、测试策略、测试方法、测试区域、测试配置、测试周期、测试资源、测试交流、风险分析等内容。借助软件测试计划，参与测试的项目成员，尤其是测试管理人员，可以明确测试任务和测试方法，保持测试实施过程的顺畅沟通，跟踪和控制测试进度，应对测试过程中的各种变更。
　　测试计划编写6要素（5W1H）：
　　why——为什么要进行这些测试；
　　what—测试哪些方面，不同阶段的工作内容；
　　when—测试不同阶段的起止时间；
　　where—相应文档，缺陷的存放位置，测试环境等；
　　who—项目有关人员组成，安排哪些测试人员进行测试；
　　how—如何去做，使用哪些测试工具以及测试方法进行测试
　　测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。所以其中最重要的是测试测试策略和测试方法（最好是能先评审）。

21、黑盒测试的测试用例常见设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用。
1）等价类划分： 等价类是指某个输入域的子集合.在该子集合中,各个输入数据对于揭露程序中的错误都是等效的.并合理地假定:测试某等价类的代表值就等于对这一类其它值的测试.因此,可以把全部输入数据合理划分为若干等价类,在每一个等价类中取一个数据作为测试的输入条件,就可以用少量代表性的测试数据.取得较好的测试结果.等价类划分可有两种不同的情况:有效等价类和无效等价类.
　　2）边界值分析法：是对等价类划分方法的补充。测试工作经验告诉我,大量的错误是发生在输入或输出范围的边界上,而不是发生在输入输出范围的内部.因此针对各种边界情况设计测试用例,可以查出更多的错误.
　　使用边界值分析方法设计测试用例,首先应确定边界情况.通常输入和输出等价类的边界,就是应着重测试的边界情况.应当选取正好等于,刚刚大于或刚刚小于边界的值作为测试数据,而不是选取等价类中的典型值或任意值作为测试数据.
　　3）错误猜测法：基于经验和直觉推测程序中所有可能存在的各种错误, 从而有针对性的设计测试用例的方法.
　　错误推测方法的基本思想: 列举出程序中所有可能有的错误和容易发生错误的特殊情况,根据他们选择测试用例. 例如, 在单元测试时曾列出的许多在模块中常见的错误. 以前产品测试中曾经发现的错误等, 这些就是经验的总结. 还有, 输入数据和输出数据为0的情况. 输入表格为空格或输入表格只有一行. 这些都是容易发生错误的情况. 可选择这些情况下的例子作为测试用例.
　　4）因果图方法：前面介绍的等价类划分方法和边界值分析方法,都是着重考虑输入条件,但未考虑输入条件之间的联系, 相互组合等. 考虑输入条件之间的相互组合,可能会产生一些新的情况. 但要检查输入条件的组合不是一件容易的事情, 即使把所有输入条件划分成等价类,他们之间的组合情况也相当多. 因此必须考虑采用一种适合于描述对于多种条件的组合,相应产生多个动作的形式来考虑设计测试用例. 这就需要利用因果图（逻辑模型）. 因果图方法最终生成的就是判定表. 它适合于检查程序输入条件的各种组合情况.
　　5）正交表分析法：可能因为大量的参数的组合而引起测试用例数量上的激增，同时，这些测试用例并没有明显的优先级上的差距，而测试人员又无法完成这么多数量的测试，就可以通过正交表来进行缩减一些用例，从而达到尽量少的用例覆盖尽量大的范围的可能性。
　　6）场景分析方法：指根据用户场景来模拟用户的操作步骤，这个比较类似因果图，但是可能执行的深度和可行性更好。
　　7）状态图法：通过输入条件和系统需求说明得到被测系统的所有状态，通过输入条件和状态得出输出条件；通过输入条件、输出条件和状态得出被测系统的测试用例。
　　8）大纲法：大纲法是一种着眼于需求的方法，为了列出各种测试条件，就将需求转换为大纲的形式。大纲表示为树状结构，在根和每个叶子结点之间存在唯一的路径。大纲中的每条路径定义了一个特定的输入条件集合，用于定义测试用例。树中叶子的数目或大纲中的路径给出了测试所有功能所需测试用例的大致数量。

22、详细的描述一个测试活动完整的过程。（供参考，本答案主要是瀑布模型的做法）
项目经理通过和客户的交流，完成需求文档，由开发人员和测试人员共同完成需求文档的评审，评审的内容包括：需求描述不清楚的地方和可能有明显冲突或者无法实现的功能的地方。项目经理通过综合开发人员，测试人员以及客户的意见，完成项目计划。然后SQA进入项目，开始进行统计和跟踪。
　　开发人员根据需求文档完成需求分析文档，测试人员进行评审，评审的主要内容包括是否有遗漏或双方理解不同的地方。测试人员完成测试计划文档，测试计划包括的内容上面有描述。
　　测试人员根据修改好的需求分析文档开始写测试用例，同时开发人员完成概要设计文档，详细设计文档。此两份文档成为测试人员撰写测试用例的补充材料。
　　测试用例完成后，测试和开发需要进行评审。
　　测试人员搭建环境
　　开发人员提交第一个版本，可能存在未完成功能，需要说明。测试人员进行测试，发现BUG后提交给BugZilla。
　　开发提交第二个版本，包括Bug Fix以及增加了部分功能，测试人员进行测试。
　　重复上面的工作，一般是3-4个版本后BUG数量减少，达到出货的要求。
　　如果有客户反馈的问题，需要测试人员协助重现并重新测试。

23、BUG管理工具的跟踪过程（用BugZilla为例子）
测试人员发现了BUG，提交到Bugzilla中，状态为new，BUG的接受者为开发接口人员。
　　开发接口将BUG分配给相关的模块的开发人员，状态修改为已分配，开发人员和测试确认BUG，如果是本人的BUG，则设置为接收；如果是别的开发人员的问题，则转发出去，由下一个开发人员来进行此行为；如果认为不是问题，则需要大家讨论并确认后，拒绝这个BUG，然后测试人员关闭此问题。
　　如果开发人员接受了BUG，并修改好以后，将BUG状态修改为已修复，并告知测试在哪个版本中可以测试。
　　测试人员在新版本中测试，如果发现问题依然存在，则拒绝验证；如果已经修复，则关闭BUG

24、您认为在测试人员同开发人员的沟通过程中，如何提高沟通的效率和改善沟通的效果？维持测试人员同开发团队中其他成员良好的人际关系的关键是什么？
尽量面对面的沟通，其次是能直接通过电话沟通，如果只能通过Email等非及时沟通工具的话，强调必须对特性的理解深刻以及能表达清楚。
　　运用一些测试管理工具如TestDirector进行管理也是较有效的方法，同时要注意在TestDirector中对BUG有准确的描述。
　　在团队中建立测试人员与开发人员良好沟通中注意以下几点：
　　一真诚、二是团队精神、三是在专业上有共同语言、四是要对事不对人，工作至上
　　当然也可以通过直接指出一些小问题，而不是进入BUG Tracking System来增加对方的好感。

25、你对测试最大的兴趣在哪里？为什么？
回答这个面试题，没有固定统一的答案，但可能是许多企业都会问到的。提供以下答案供考：
　　最大的兴趣，感觉这是一个有挑战性的工作；
　　测试是一个经验行业，工作越久越能感觉到做好测试的难度和乐趣
　　通过自己的工作，能使软件产品越来越完善，从中体会到乐趣
　　回答此类问题注意以下几个方面：
　　尽可能的切合招聘企业的技术路线来表达你的兴趣，例如该企业是数据库应用的企业，那么表示你的兴趣在数据库的测试，并且希望通过测试提升自己的数据库掌握能力。
　　表明你做测试的目的是为了提升能力，也是为了更好的做好测试；提升能力不是为了以后转开发或其他的，除非用人企业有这样的安排。
　　不要过多的表达你的兴趣在招聘企业的范畴这外。比如招聘企业是做财务软件的，可是你表现出来的是对游戏软件的兴趣；或招聘是做JAVA开发的，而你的兴趣是在C类语言程序的开发。

90%以上软件公司都会问的软件测试面试题：
1、软件测试的流程？
　　考查目的：
		软件测试基础
　　参考答案：
		需求评审（需求是否合理、需求是否可测试）-》
		测试计划（人、时间、业务点、资源）->测试设计(写标题，测试用例)->冒烟测试（准入测试）
		全面开展测试（测试执行：测试环境搭建，）->bug提交->新版本发布（bug有没有验证，新功能测试、回归测试）
		测试报告总结。

2、web测试和app测试的区别?
　　考查目的：
		你对web和app的认识
　　参考答案：
		网页（PC、手机）
		app（手机）
		web
		app（混合APP，纯APP）
		共同点：兼容性，客户端
　　 	不同点：app手机，耗电量，网络差等。

3、如何提交高质量的缺陷报告单?
　　考查目的
		软件bug单
　　参考答案：
		bug可读性（把复现步骤写清晰，发现bug的环境记录详细） 
		深层次（学习人家的bug ；竞争条件的地方，经常出问题的地方）
	测试需求-》测试计划-》测试设计-》测试实施-》测试执行-》测试报告
	需要进行测试评估判定每个测试过程是否合理
	bug管理是接受bug-》分配bug-》开发修订bug-》测试验证bug是重新修订还是选择关闭
	
4、web如何进行性能测试?
　　考查目的：
		web性能评估
　　参考答案：
		web系统性能指标是什么（性能测试评估）
		我们项目web系统，http，jmeter，LR；Jmeter
		我们要测试哪些业务（业务建模）
		监控 
		记录并且调试 。

5、你们是如何编写测试用例的？
　　根据什么来编写的？如何保证用例的覆盖度？
	考查目的：
		测试用例编写和方法，工具，对业务需求的把握
　　参考答案：
		我们是根据需求（需求说明书、之前的产品、同品、软件规范、经验值）编写用例（UI、功能、兼容性、安全、性能、稳定性、易用性）
		用到的方法（测试用例设计方法）。
		如果把上述的点都考虑并测试到了，那么覆盖度就达到要求。
　　工具：
		表格
		freemind 思维编写
		testlink，禅道
	测试用例有测试编号、测试项目名、测试标题、重要级别、预置条件、输入操作步骤、预期输出、测试结果、测试者&时间

6、设计一个电梯的测试用例?
　　考查目的：
		需求 
		测试设计 
		测试思维 
		测试经验
　　参考答案：
		一定要反问面试官，有没有具体的需求，比如电梯的用途，用在什么场合等
　　然后从下列方面去考虑回答：
		功能 
		容量（容错，安全，解除，红外感应，提示，告警）
		稳定性
		通风，速度等。

关于测试用例的问题：
	1.测试用例，怎么写 ？
		答：
		1）根据需求文档，拆分测试点 。
		2）根据测试用例设计方法 + 经验 + 拆分后的测试点 + 通用用例规约 。来设计最终的详细测试用例 。
	2.没有需求文档，如何写用例 ？
		1、首先可以查找其他相关文档。比如产品策划书、Feature List，不可能什么文档都没有吧。我们可以收集一切相关的文档来帮助理解所要测试的产品需要完成的目标。
		2、尽量多参加该项目组内的会议。比如需求讨论、设计讨论、计划讨论等会议，尽管没有白纸黑字的文档，但讨论过程中也能让你加深对产品的理解。
		3、咨询相关人员。经过以上两个过程，应该对产品有了一个初步的理解，花点时间自己把大致的功能点整理一下，遇到不明确的、有疑问的，可以咨询项目负责人或者相关市场人员，他们应该对整个产品心中有数。
		这里有一个前提是，在对产品有了初步了解后，才有针对性的去咨询，否则在什么都不知道的情况下。
		第一，对方没有耐心和时间向你介绍整个产品；
		第二，对于对方的讲解，估计最多也只能了解个大概，不能很好理解。
		4、召集相关人员，对你整理的结果进行讨论。整理以上几步得出的结论，总结成文档，发给相关人员，包括项目负责人、市场部代表、开发人员等，让他们帮助评审check，根据意见对文档不断进行补充完善。当最后通过评审后，这个文档就可以当作依据来设计你的测试用例了。
		当然，如果是一款已经上线的产品，可以多去使用产品。
		有不懂的记录下来，问产品经理。如果没有产品经理，问测试同事。如果公司在职的测试也没有（就你一个测试），问开发同学。
		也可以去看历史Bug。通过历史Bug，可以了解到一些你需要关注的东西。
	问题延伸：
		有需求文档；但需求不明确呢 ？如何写用例 ？
			需求未定，或者需求频繁变更的团队，明显不适合写测试用例，写了也是浪费时间（你写的速度，还没有变更的速度快，每天都是在做无用功。或者说，需求未定，很多细节，你也写不了），所以先写测试点
			测试点关注业务逻辑、业务场景、异常测试等，至于具体UI细节，简单带过即可（因为此时，需求未定，后续确定后，做简单补充即可，因为UI层面的问题，视觉就可直观的看出来，不需要大篇幅的测试用例，浪费时间，产出并不高）
			总结来看，就是 写更大颗粒度的测试点来代替测试用例。
			由此减少需求变更带来的用例维护成本，又可测试前置，且还可以保证核心流程、功能、场景化、异常情况充分覆盖 
		补充一个话题
			关于需求频繁变更，本身就是不合理的，特别是版本发布临界点，是不建议临时插播需求的。
			此处，项目负责人，研发负责人应严格把关，整个团队一起来把控质量。
			而不是，任由需求变更，最后出问题找测试。
			源头没控制，最后出问题属正常现象，问题看本质，方是一个成熟的职场人。
	3.是否有必要写测试用例？
		1.如果公司只有你一个Tester，真没必要写测试用例了，写测试点（思维导图写测试点，不错的方式，如Xmind ）吧，提取关键要素 。
		2.如果你们的需求老是频繁变化，写测试点吧；
		你的测试用例的更新速度永远跟不上需求的变化速度，每天都在改用例。So，太详细的用例，无太多意义和价值 。
		3.如果你们的节奏控制的非常紧凑，完全没时间严格按照测试用例执行，写测试点吧，提取关键要素 。
		4.如果团队的整体Tester技能均衡，测试点已经能够保证充分覆盖了，写测试点吧，测试用例的意义不大 。
		5.如果这块的逻辑非常复杂，你未曾接触，尽量写详细点的测试用例，通过用例的梳理过程，是一个很好的梳理理解需求和产品的过程。
	4.写用例，是否有通用的用例模板 ？我不知道如何开始写用例，是否有模板，来填内容即可 ？
		用例主要包含几个主要元素：用例唯一编号、用例类型、模块、功能项、输入、预期结果、实际结果、测试结论、备注，就OK
		如上是通用格式，你自己，根据公司实际情况可增删；
		由于每家公司的实际情况不太一样，团队配合流程不一样，所以会各有差异；
		老徐的公众号[简尚]回复“用例模板”
	5.用例已经写完了 。那么，用例评审呢 ？ 谁来发起评审 ？ 哪些人参加 ？评审几轮 ？ 需要做哪些准备 ？
		用例评审主要是产品、开发和测试人员，针对测试用例能否用于项目的测试而做的工作。
		用例评审的目的
			为了减少测试人员执行阶段做无效工作（执行无效case，提交无效问题）
			为了避免三方需求理解不一致；
			为了每个测试人员的质量标准与项目要求标准达成一致。
		评审前准备工作：
			1.需求评审结束就能着手把需求拆分为功能点，工具可以使用XMind，包含预期和测试结果，Android和iOS测试结果可用标签区分
				优点：画思维导图，逻辑清晰，便于评审人员（产品和开发人员）快速查看，评审效率高
			2.把功能点在分解为具体测试用例
				补全预期和测试结果便于跟进
			3.用例写完，自检，有疑问罗列出来，可事先跟产品开发讨论，确定结果后完善用例，仍有疑问可先做标记，评审会一起讨论
			4.和评审人员确定好评审时间，抛出用例和问题进行讨论
		用例评审时间：
			对于敏捷开发项目，建议控制在半小时
			如果你认为需求复杂，功能点太多，半小时讲不完，那么建议你对功能点划分优先级
			优先评审优先级高的用例，再针对疑问多的用例评审
			最后对于功能简单的用例可简单带过。时刻记住我们用例的评审目标，不能流于形式。
		用例评审的形式
			先对功能复杂，优先级高，疑问多的用例进行评审，再评审功能简单，优先级低的功能点。
			对于评审过程中，一时半会没有结论的问题，可以记录下来，作为会后讨论跟进的重点。
			这种做法，有很多优点，评审刚开始的一段时间，大家注意力集中，参与激情高，这段时间讨论有难度有疑问的问题，效率高。最重要的事最先做。
			另外，整个评审会主次分明，有高潮有缓点，可以更高效的达到我们评审的目的。
		正式评审
			正式评审过程中需要注意几个细节，如果你都做到了，那么可以说整个评审是成功的，有价值的。
			1、评审要按用例的优先级，功能的复杂程度进行；
			2、评审过程中尽量做到，思路清晰，用最简洁的语言阐述每一个功能点；
			3、超过5分钟无法确定结果的问题留作会后讨论跟进
		评审结束后
			评审结束后，第一时间整理测试用例，把修正的内容重新整理补全。
			会上未确定的内容，会后继续跟进，直到确定结果。
			没有任何有疑问的地方了，再做个简单的用例评审会议总结（如修正了哪些功能点，补全了哪些？哪些模块功能有变动？哪些功能推迟到下一期做？等），
			这个总结是给自己整个用例评审工作总结，同时需同步给项目组其他成员，做好信息共享，这点很重要。



