1
APP本身的功能及测试要点

1、安装及卸载：
验证App是否能正确安装、运行、卸载以及操作过程和操作前后对系统资源的使用情况
2、升级(update)：
        1）当客户端有新版本时，应有更新提示。
        2）当版本为非强制升级版时，用户可以取消更新，老版本能正常使用。用户在下次启动app时，仍能出现更新提示。
        3） 当版本为强制升级(不升级无法使用APP)版时，当给出强制更新后用户没有做更新时，退出客户端。下次启动app时，仍出现强制升级提示。
        4）当客户端有新版本时，在本地不删除客户端的情况下，直接更新检查是否能正常更新。
        5）新版本可以离线安装覆盖当前版本；
        6）升级不能覆盖用户的数据；
3、软件按钮：
        软件中相关按钮的功能是否实现，如返回按钮之类的。
4、物理按钮：
        指手机的功能键按钮的功能实现的测试。
5、注册：
        用户注册功能的测试:检验未注册和已注册用户是否能成功注册,以及注册信息是否完整.
6、登录：
        用户登录的功能测试
7、忘记密码
8、退出：
        退出功能要注意，安卓手机要注意双击返回键是否能退出，IOS系统的app一般有退出按钮。
9、个人信息管理：
        主要是对已注册用户，登录后的相关信息的管理，信息的内容与需求有关。
10、分享：
        1）分享功能是否能正常分享
        2）APP上分享成功后，需检测实际微博上是否分享成功 ，分享鉴权是否能正常通过微博用户名和密码的验证（验证成功和失败需提示）
        3）取消分享是否能正常取消，是否会出现卡住情况 分享鉴权成功后，下次分享是否还需再次输入微博用户名和密码
        4）邮件分享时，当机器没有绑定邮箱时，页面提示是否正确或者能否成功跳转到邮件绑定页面
11、支付功能检测：
        1）订单金额与支付金额验证（单件，多件总额）数额一致（可使用特殊金额如：0、99、99.999、44.44445等）
        2）支付优惠劵或者选择扣款验证，能正常使用
        3）未提交支付的时候能正常取消支付
        4）在未提交支付页面长时间停留再次操作需要给用户提
        5）点击支付响应后，在单个交易周期里只响应一次
        6）订单支付失败可以重新进入支付流程
        7）用户在支付订单的时候需要再次提示用户金额以及收款方信息用户确认
        8）如果用户发现数据不对可以返回重新提交支付
        9）用户确认付款后跳正常转到相应的支付页面（APP本身的支付页面，其他APP或者网页的交互平台。根据业务的不同进行测试）
        10）测试账户下余额不足的情况下支付失败，给出提示，但不扣款
        11）测试账户下余额足够的情况下支付成功，能给出提示和跳转，扣款成功
        12）测试账户下余额不足的情况下，取消支付。正常取消。
        13）测试账户下余额充足的情况下，取消支付。正常取消。
        14）支付成功后订单状态正常转换
        15）支付失败或者取消支付时订单状态不发生变化
        16）网络异常情况下测试即服务器正常响应了请求包，但 APP收到请求报超时。APP订单应该重新刷新状态
        17) 支付账户余额不足后可重新进行正常支付

2
APP关联的事务

因为不同公司的APP关联的事业有所不同，这里主要简单讲一下，主要有以下几点：
1、与其它应用有业务关联
2、公司的用户体系
3、其他

3
APP外部环境功能及测试要点

1、网络：
        （2G、3G、4G、wifi、离线）app的运行情况，主要有以下几点:
        1）离线模式下,功能是否正常 在线模式下加载过的页面会缓存,在离线模式下是否能显示缓存的页面
        2）在线模式未加载过的页面,在离线模式下是否有加载图标或者提示
        3）离线模式下操作需要连接网络的功能,是否会有网络未连接提示
        4）离线模式下操作不需要连接网络的功能，是否操作正常
        5）离线模式下操作拨打电话的功能，提示是否正常
2、系统（OS）：
    IOS:(系统版本的适配、屏幕尺寸的适配）
    Android:(厂商（如三星、小米、华为）、系统版本、屏幕尺寸的适配）
3、分辨率
        主要是测试app的适配情况。
4、任务管理器进入
5、桌面点击再次进入
6、手机交叉事件测试：
        1)低电量、来电话、来短信、锁屏、
        2)push提醒、usb数据线插拔提醒
        3)充电提醒是否能正常使用

4
APP其他测试

1、 UI检测
        1）UI风格是否符合UI原型图标准
        2）字体类型，字体大小是否与UI原型图保持一致
        3）间距，边距是否和UI原型图保持一致(包括图片,文本,图标等)
        4）UI按钮，图标，图片的阴影效果
        5）UI按钮，图标，图片的高效果
        6）图片的清晰度，是否失真
        7）是否支持横竖屏，旋转
        8）图片显示是否完整，清晰（旋转过后或者45度角度倾斜旋转）
2、ios与android机器交互检测(APP有ios版本和android版本才需要这些测试）
        1）ios与ios机器相互发送消息、图片、语音、能正常接收
        2）android与android机器相互发送消息、图片、语音，能正常接收
        3）ios与android机器相互发送消息，图片，语音
3、状态保存检测：
       1）是否确认某些操作需要保存上次操作状态(例如点击弹出图片提示)
        2）关闭页面再打开,是否需要保存上次状态
        3）切换页面再切回来,是否需要保存上次状态
        4）在当前页面来交叉时，交叉结束后是否保
        5）在当前界面 页面设置保存操作，通过页面
       6）切换再切回，是否保存了设置（例如：修改昵称，资料，电话）

APP测试入门——常见功能测试点汇总
01
安装和卸载
应用的安装和卸载在任何一款APP中都属于最基本功能。一旦出错，就属于优先级为紧要Critical的缺陷。因此APP的安装和卸载应作为一个测试点多加重视。主要关注以下几个方面：
        ▲ 应用是否可以正常安装（命令行安装；豌豆荚／手机助手等第三方软件安装；apk／ipa安装包安装）
        ▲ 应用是否可以在iOS和Android不同系统，版本，机型上进行安装（有的系统版本过低，应用不能适配）
        ▲ 安装过程中是否能暂停，再次点击，是否继续按照
        ▲ 安装空间不足时如何表现，是否有相应提示，提示是否友好
        ▲ 安装过程中断网或网络不稳定的情况下，是否有相应提示
        ▲ 是否可以正常删除应用（桌面删除；第三方软件删除；命令行删除）
        ▲ 应用卸载后所有的安装文件夹是否全部删除
        ▲ 卸载过程中出现死机，断电，重启等意外的情况，待环境恢复后是否可以继续正常卸载
        ▲ 卸载是否支持取消功能，单击取消后软件卸载情况是否正常
02
      运行      
        ▲ 软件安装后需要检查应用是否能正常运行：
        ▲ APP安装完成后，是否可以正常打开，稳定运行
        ▲ APP的速度是可以让人接受，切换是否流畅
        ▲ 网络异常时，应用是否会崩溃:在请求超时的情况下，如果程序逻辑处理的不好，就有可能发生Crash。(比如黄油相机APPV4.8.2.8版本，在无网络状态下，进入照片编辑页面，选择并拖动照片时，会发生闪退)
03
  注册和登录  
用户注册和登录功能是很多APP产品最基础的构成之一，而主流的登录页面大致分为三种：（1）账号密码注册登录；（2）手机号注册登录；（3）第三方授权登录。本文针对前两种注册登录方式进行阐述：
        3.1账号密码注册登录；
        ▲ 输入正确的账号密码，可正常注册和登录
        ▲ 已注册用户再次注册
        ▲ 未注册用户尝试登录
        ▲ 密码“****”展示
        ▲ 账号输入框对最大长度和格式应有校验（比如邮箱账号需要邮箱格式等）
        ▲ 账号或密码输入错误时建议提示“账号或密码错误”，而不是“账号错误”或“密码错误”
        ▲ 密码是否加密传输（可抓取请求查看）
        ▲ 密码更改后，登录时是否做到了有效数据的校验：修改前的密码失效；
        ▲ 未登录时对一些页面的操作，是否做了控制
        ▲ 切换账号登录，检验登录的信息是否做到及时更新
        ▲ 对于多个端都进行操作时，确保数据库操作无误，且每个端可以及时看到数据的更新
        ▲ 多设备同时登录同一帐号时（iOS+iOS，Android+Android，iOS+Android），检查是否将原用户剔除，弹出异地登录提示，且对一些需要登录后才能使用的页面无操作权限。
        3.2手机号注册登录；
        ▲ 手机号输入框格式校验检查
        ▲ 验证短信的接收是否及时；
        ▲ 用验证码可正常登录；
        ▲ 验证码错误时，登录失败+友好提示
        ▲ 验证短信文案是否符合所测APP；
        ▲ 重复发送验证码，前一个验证码正常失效
        ▲ 频繁操作验证码发送，应有操作限制
        ▲ 验证码有效期校验（超过有效期无法登录）
04
  日历控件  
        ▲ 目前很多包含购票功能的APP中都会设置日历控件方便选票，那么对日历控件的测试我们需要关注哪些呢？
        ▲ 月份和日期对应（比如2月有28天，7月31天）
        ▲ 闰年2月，应有29天
        ▲ 跨年时，年份应有增加。
05
   权限设置   
当前很多APP的使用依赖于位置，通知，网络等用户权限，例如杭州公交APP，在首次启动时会询问用户是否同意启用定位，通知，网络权限。针对用户权限，我们可以多关注以下几点：
        ▲ 首次启动APP询问是否同意启用权限
        ▲ 消息权限开启时，消息推送是否正常接收（iOS系统应用启用和后台关闭时都应该可以收到；Android系统在后台关闭进程后就不会推送）
        ▲ 消息权限关闭后，APP客户端接收不到消息推送。
        ▲ 位置权限开启时，APP可定位到当前位置（比如杭州公交APP，能自动定位到用户当前位置，展示出附近的公交站）
        ▲ 位置权限关闭后，APP需定位才可用的功能，是否有提示引导用户开启权    限，比如“请打开系统设置中’隐私-定位服务’，允许“XXXX”使用您的位置”。
        ▲ 网络权限关闭时，APP是否有提示（“服务器或网络错误，请稍后重试”），是否有提示引导用户开启权限。
06
  软件更新  
        ▲ 强制更新（APP开启后要求必须更新，否则无法使用APP）：1.多次关闭和打开APP后是否正常跳出更新弹窗，且无法关闭；2.点击更新是否正确跳转至后台配置的更新页面；
        ▲ 非强制更新（只提示一次更新）：1.可正常关闭更新弹窗。2.重启APP更新提示按照需求再次显示，或者不再显示；3.点击更新是否正确跳转至后台配置的更新页面；
        ▲ 取消版本更新时，老版本可以正常使用；
        ▲ APP更新后版本号应有更新；
        ▲ APP更新后新增功能和老功能可正常使用。
        ▲ 当有新版本时，不删除客户端的情况下，直接更新是否成功；
        ▲ 删除APP后更新
07
   网络环境   
        ▲ 3G,4G,wifi 网络环境下应用的各功能可正常运行；
        ▲ 网络异常时 ，数据交换失败是否会有提醒；
        ▲ 有网到无网再到有网环境时，数据是否可以自动恢复，正常加载；
        ▲ 只允许内网访问的APP，在连接到外网时是否有友好提示。
08
   兼容性测试   
        ▲ 尽量覆盖该产品的主要用户（建议选取产品自己的数据，具体技术方案可以采取APP内部埋点的方法。如果是新发布的产品，可以选取竞品类产品的数据）
        ▲ 从不同系统，版本，分辨率，机型（不同厂家ROM）等纬度进行适配测试
        ▲ 通常选择在少数主流设备上执行全向的用例，在其他兼容性范围内的设备上覆盖主要功能的测试用例；
        ▲ 关注各功能界面在不同分辨率下是否存在UI展示问题（如果代码没有对不同分辨率做适配处理，就可能会出现错位，遮挡，留白，拉伸和模糊等问题）
        ▲ 基于UI自动化脚本的云测试方案（基于轻量级的UI自动化脚本，以及借助云平台大量的真机资源）
09
    异常测试   
        ▲ 没有内存空间时，APP能否正确响应；
        ▲ 横竖屏切换展示；
        ▲ APP运行时网络中断；
        ▲ 反复操作某个功能（一般是比较重要的功能），不断点击和刷新，是否会出现闪退；
        ▲ APP运行时接入电话，短信，微信，或其他消息

APP测试面试题
1.代码能力
　　1.1、请用自己最擅长的编程语言，将一个字符串反转并输出？
　　参考答案：
　　（1）python实现：
　　方法1、使用[::-1]：
　　s = 'python'
　　print s[::-1]
　　方法2、使用reverse()方法：
　　l = list(s)
　　l.reverse()
　　print ''.join(l)
　　（2）java实现：
　　方法1、使用StringBuffer，一点技巧也没有：
　　public String reverse(String s){
　　return new StringBuffer(s).reverse().toString();
　　}
　　方法2、灵活运用了字符串功能：
　　public String reverse(String s){
　　char[] letters=s.toCharArray();
　　char temp;
　　int len=letters.length;
　　for(int i=len/2-1;i>=0;i--){
　　temp=letters[i];
　　letters[i]=letters[len-1-i];
　　letters[len-1-i]=temp;
　　}
　　return new String(letters);
　　}
　　1.2、针对数十个安卓应用市场渠道包，请问如何进行大体的功能验证，简单叙述一下思路？
　　参考答案：可以自动化遍历某个目录下面的所有渠道包apk，然后循环：安装——》登录——》**操作——》退出——卸载
2.测试思路
　　2.1、给你一个模块，比如注册模块，你会怎么样设计与执行测试？
　　参考答案：数据——》从哪里来（入口）——》到哪里去（出口）——》数据库（检验数据的正确性）
　　2.2、请说一下你以前公司功能测试通过的标准？（自由发挥）
　　2.3、你认为app测试过程中，相对于web，要更多注意哪些测试点？或者说app测试和web测试有哪些不同之处？
　　参考答案：
　　1、“点击加载更多”的分页处理技术，是否有重复的数据，数据显示是否完整，到达最后一页后是否还有数据进行显示；
　　2、数据的排序方式；
　　2、界面跳转是否正确；
　　3、出现异常情况是否有提示，是否跳转到已经设定好的默认页面，如断网情况下，显示网络未连接，数据加载失败，或者如果此页面没有数据显示，显示友好提示信息；
　　4、图片处理的地方，是否容易出现程序崩溃现象，主要是图片压缩机制；
　　5、前台展示的数据，后台进行变动（增、删、改），是否是实时更新还是app一开始运行再进行加载；
　　6、前台主动发出请求，后台数据库中是否存在相应的数据同时包括数据的关联性（商家的会员进行下订单，数据库中生成一条订单的记录的同时，生成一条积分记录，该会员的积分进行相应的变化）；
　　7、手机app网络环境测试重点：主要是针对2G、3G、4G、wifi三种网络环境进行测试 ；
　　8、手机app兼容性测试：主要是针对android各个系统版本进行测试，及测试屏幕分辨率进行测试；
3.测试技术
　　3.1、说说会用哪些抓包工具？怎么用的？
　　参考答案：比如fiddler，主要用来做app抓包使用，先在fiddler客户端做好各项配置，端口设置为8888，然后在手机上设置代理，就可以抓包了，主要看的是服务器返回的值、还能够修改传入参数、传出的参数、模拟网络延时，去构造不同场景。
　　3.2、什么是alpha测试和beta测试？
　　alpha测试：在公司场地，由员工主导的测试行为；beta测试：在客户场地，由客户主导进行的测试。
　　3.3、请写出一个SQL来查询分数前五5的所有人？
　　mysql：select * from 分数表 order by 分数 desc limit 5;
　　oracle：select top 5 * from 分数表 order by 分数 desc;
　　3.4、linux常用命令有哪些？
　　cd命令：切换到某个目录
　　ls命令：列出当前目录的所有文件、文件夹
　　pwd命令：列出当前目录的路径
　　cp命令：复制
　　mv命令：剪切
　　grep命令：管道
　　find命令：查找
　　rm命令：删除
　　ps命令：查看进程
　　kill命令：杀掉某个进程
　　cat命令：查看某文件
　　tar命令：打包
　　chmod命令：赋权限
　　chown命令：改变文件的所有者
　　vim命令：文本编辑
　　3.5、请说明Android手机和IOS手机，系统有什么区别？
　　1、两者运行机制不同：IOS采用的是沙盒运行机制，安卓采用的是虚拟机运行机制。
　　2、两者后台制度不同：IOS中任何第三方程序都不能在后台运行；安卓中任何程序都能在后台运行，直到没有内存才会关闭。
　　3、IOS中用于UI指令权限最高，安卓中数据处理指令权限最高。
　　3.6、请简要介绍一下安卓系统四层架构？
　　从上到下，依次是：应用程序层——》应用程序框架层——》系统运行库层——》Linux核心层
　　3.7、简单介绍一下Android SDK中自带的几个工具/命令的功能？
　　参考答案：
　　ddms：Dalvik Debug Monitor Service，是 Android 开发环境中的Dalvik[虚拟机]调试监控服务。
　　monkey：Android中的一个命令行工具，可以运行在模拟器里或实际设备中。它向系统发送伪随机的用户事件流(如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试。
　　uiautomator：UIAutomator是Eclipse自带的用于UI自动化测试工具，可仿真APP上的单击、滑动、输入文本等操作。
　　monitor：同uiautomator
　　adb：ADB的全称为Android Debug Bridge，就是起到调试桥的作用。通过ADB我们可以在Eclipse中方面通过DDMS来调试Android程序，就是debug工具。
　　3.8、常用的adb命令有哪些？请随便写一个monkey脚本，并解释其中参数的含义？
　　参考答案：
　　（1）adb devices、adb install、adb uninstall、adb shell pm 、adb shell am
　　（2）adb shell monkey -p com.xiaoniu.finance -s 123 --throttle 500 --ignore-crashes --ignore-timeouts --ignore-security-exceptions -v -v -v 2000 > d:\xnonline-monkey-test1.txt
　　-p：app包名、
　　--throttle：每个操作的间隔时间，单位ms
　　--ignore-crashes：忽略崩溃
　　--ignore-timeouts：忽略超时
　　--ignore-security-exceptions：忽略安全异常
　　-v -v -v：日志详细等级，3个v代表最详细等级的日志
　　d:\xnonline-monkey-test1.txt：代表将产生的日志，放到本地PC的D盘，并命名为：xnonline-monkey-test1.txt
　　3.9、测试过程中遇到app出现crash或者ANR，你会怎么处理？
　　参考答案：可以先把日志过滤出来：adb logcat | findstr xxxxx(过滤日志信息) ，然后再搜索其中的关键字，比如：exception、crash，看看是那些方法或者异常导致了问题的发送，初步定位问题原因后，可以交给开发人员去具体查找深层原因并修复。
　　3.10、请说一下以往工作中都曾具体做过哪些工作？其中最擅长哪部分工作（功能，自动化（UI和接口），性能）？这部分你是怎么做的？（自由发挥）
　　3.11、请简单介绍一下使用过的安卓UI自动化测试工具？
　　参考答案：
　　appium：是一个移动端的自动化框架，可用于测试原生应用，移动网页应用和混合型应用，且是跨平台的。
　　robotium：是一款国外的Android自动化测试框架，主要针对Android平台的应用进行黑盒自动化测试，它提供了模拟各种手势操作（点击、长按、滑动等）、查找和断言机制的API，能够对各种控件进行操作。
　　3.12、你觉得app的性能测试，即专项测试，需要重点关注哪些方面？
　　参考答案：内存、cpu占用、耗电量、流量、流畅度等

APP功能测试点分析
1.2测试周期
测试周期可按项目的开发周期来确定测试时间，一般测试时间为两三周（即 15个工作日），
根据项目情况以及版本质量可适当缩短或延长测试时间。正式测试前先向主管确认项目排期。

1.3测试资源
测试任务开始前，检查各项测试资源。
--产品功能需求文档；
--产品原型图；
--产品效果图；
--行为统计分析定义文档；
--测试设备（ios3.1.3-ios5.0.1；  Android1.6-Android4.0； Winphone7.1及以上）；
--其他。

1.4日报及产品上线报告
1）测试人员每天需对所测项目发送测试日报。
2）测试日报所包含的内容为：
--对当前测试版本质量进行分级；
--对较严重的问题进行例举，提示开发人员优先修改；
--对版本的整体情况进行评估。
3）产品上线前，测试人员发送产品上线报告。
4）上线报告所包含的内容为：
---对当前版本质量进行分级；
---附上测试报告（功能测试报告、兼容性测试报告、性能测试报告以及 app可用性能标准结
果）；
--总结上线版本的基本情况。若有遗留问题必须列出并记录解决方案。
 
 
2.1安全测试
2.1.1软件权限
1）扣费风险：包括发送短信、拨打电话、连接网络等
2）隐私泄露风险：包括访问手机信息、访问联系人信息等
3）对App的输入有效性校验、认证、授权、敏感数据存储、数据加密等方面进行检测
4）限制/允许使用手机功能接入互联网
5）限制/允许使用手机发送接受信息功能
6）限制/允许应用程序来注册自动启动应用程序
7）限制或使用本地连接
8）限制/允许使用手机拍照或录音
9）限制/允许使用手机读取用户数据
10)限制/允许使用手机写人用户数据
11)检测App的用户授权级别、数据泄漏、非法授权访问等
 
2.1.2安装与卸载安全性
1）应用程序应能正确安装到设备驱动程序上
2）能够在安装设备驱动程序上找到应用程序的相应图标
3）是否包含数字签名信息
4）JAD文件和  JAR包中包含的所有托管属性及其值必需是正确的
5）JAD文件显示的资料内容与应用程序显示的资料内容应一致
6）安装路径应能指定
7）没有用户的允许,应用程序不能预先设定自动启动
8）卸载是否安全,其安装进去的文件是否全部卸载
9）卸载用户使用过程中产生的文件是否有提示
10）其修改的配置信息是否复原
11）卸载是否影响其他软件的功能
12）卸载应该移除所有的文件

2.1.3数据安全性
1）当将密码或其他的敏感数据输人到应用程序时,其不会被储存在设备中,同时密码也不会被解码
2）输人的密码将不以明文形式进行显示
3）密码,信用卡明细,或其他的敏感数据将不被储存在它们预输人的位置上
4）不同的应用程序的个人身份证或密码长度必需至少在 4一  8个数字长度之间
5）当应用程序处理信用卡明细,或其他的敏感数据时,不以明文形式将数据写到其它单独的
文件或者临时文件中。以 6）防止应用程序异常终止而又没有侧除它的临时文件,文件可能遭受入侵者的袭击,然后读取这些数据信息。

7）当将敏感数据输入到应用程序时,其不会被储存在设备中
8）备份应该加密,恢复数据应考虑恢复过程的异常�通讯中断等,数据恢复后再使用前应该
经过校验
9）应用程序应考虑系统或者虚拟机器产生的用户提示信息或安全警告
10）应用程序不能忽略系统或者虚拟机器产生的用户提示信息或安全警告,更不能在安全警
告显示前,，利用显示误导信息欺骗用户，应用程序不应该模拟进行安全警告误导用户
11）在数据删除之前，应用程序应当通知用户或者应用程序提供一个“取消”命令的操作
12）“取消”命令操作能够按照设计要求实现其功能
13）应用程序应当能够处理当不允许应用软件连接到个人信息管理的情况
14）当进行读或写用户信息操作时,应用程序将会向用户发送一个操作错误的提示信息
15）在没有用户明确许可的前提下不损坏侧除个人信息管理应用程序中的任何内容Μ
16）应用程序读和写数据正确。
17）应用程序应当有异常保护。
18）如果数据库中重要的数据正要被重写,应及时告知用户
19）能合理地处理出现的错误
20）意外情况下应提示用户

2.1.4通讯安全性
1）在运行其软件过程中,如果有来电、SMS、EMS、MMS、蓝牙、红外等通讯或充电时,是否能暂停程序，优先处理通信,并在处理完毕后能正常恢复软件,继续其原来的功能

2）当创立连接时,应用程序能够处理因为网络连接中断,进而告诉用户连接中断的情况
3）应能处理通讯延时或中断
4）应用程序将保持工作到通讯超时,进而发送给用户一个错误信息指示有连接错误
5）应能处理网络异常和及时将异常情况通报用户
6）应用程序关闭或网络连接不再使用时应及时关闭)断开
7) HTTP、HTTPS覆盖测试
--App和后台服务一般都是通过  HTTP来交互的，验证  HTTP环境下是否正常；
--公共免费网络环境中（如：麦当劳、星巴克等）都要输入用户名和密码，通过  SSL认证
来访问网络，需要对使用 HTTP Client的  library异常作捕获处理。

2.1.5人机接口安全性
1）返回菜单总保持可用
2）命令有优先权顺序
3）声音的设置不影响应用程序的功能
4）应用程序必需利用目标设备适用的全屏尺寸来显示上述内容
5）应用程序必需能够处理不可预知的用户操作,例如错误的操作和同时按下多个键

2.2安装、卸载测试
验证 App是否能正确安装、运行、卸载
2.2.1安装
1）软件在不同操作系统（Palm OS、Symbian、Linux、Android、iOS、Black Berry OS 6.0、
Windows Phone 7）下安装是否正常。
2）软件安装后的是否能够正常运行，安装后的文件夹及文件是否写到了指定的目录里。
3）软件安装各个选项的组合是否符合概要设计说明
4)）软件安装向导的 UI测试
5）软件安装过程是否可以取消，点击取消后，写入的文件是否如概要设计说明处理
6）软件安装过程中意外情况的处理是否符合需求（如死机，重启，断电）
7）安装空间不足时是否有相应提示
8）安装后没有生成多余的目录结构和文件
9）对于需要通过网络验证之类的安装，在断网情况下尝试一下
10）还需要对安装手册进行测试，依照安装手册是否能顺利安装

2.2.2卸载
1）直接删除安装文件夹卸载是否有提示信息。
2）测试系统直接卸载程序是否有提示信息。
3）测试卸载后文件是否全部删除所有的安装文件夹。
4）卸载过程中出现的意外情况的测试（如死机、断电、重启）。
5）卸载是否支持取消功能，单击取消后软件卸载的情况。
6）系统直接卸载 UI测试，是否有卸载状态进度条提示。

2.3 UI测试
测试用户界面(如菜单、对话框、窗口和其它可规控件)布局、风格是否满足客户要求、文字
是否正确、页面是否美观、文字、图片组合是否完美、操作是否友好等。
UI测试的目标是确保用户界面会通过测试对象的功能来为用户提供相应的访问或浏觅功能。
确保用户界面符合公司或行业的标准。包括用户友好性、人性化、易操作性测试。

2.3.1导航测试
1）按钮、对话框、列表和窗口等；或在不同的连接页面之间需要导航
2）是否易于导航，导航是否直观
3）是否需要搜索引擎
4）导航帮助是否准确直观
5）导航与页面结构、菜单、连接页面的风格是否一致
 
 2.3.2图形测试
1）横向比较。各控件操作方式统一
2）自适应界面设计，内容根据窗口大小自适应
3）页面标签风格是否统一
4）页面是否美观
5）页面的图片应有其实际意义而要求整体有序美观
6）图片质量要高且图片尺寸在设计符合要求的情况下应尽量小
7）界面整体使用的颜色不宜过多

2.3.3内容测试
1）输入框说明文字的内容与系统功能是否一致
2）文字长度是否加以限制
3）文字内容是否表意不明
4）是否有错别字
5）信息是否为中文显示
6）是否有敏感性词汇、关键词
7）是否有敏感性图片，如：涉及版权、专利、隐私等图片


2.4功能测试
根据软件说明或用户需求验证  App的各个功能实现，采用如下方法实现并评估功能测试过程：

1)采用时间、地点、对象、行为和背景五元素或业务分析等方法分析、提炼 App的用户使用
场景，对比说明或需求，整理出内在、外在及非功能直接相关的需求，构建测试点，并明确
测试标准，若用户需求中无明确标准遵循，则需要参考行业或相关国际标准或准则。

2)根据被测功能点的特性列丼出相应类型的测试用例对其进行覆盖，如；涉及输入的地方需
要考虑等价、边界、负面、异常或非法、场景回滚、关联测试等测试类型对其进行覆盖。
3)在测试实现的各个阶段跟踪测试实现与需求输入的覆盖情况，及时修正业务或需求理解错
误。

2.4.1运行
1）App安装完成后的试运行，可正常打开软件。
2）App打开测试，是否有加载状态进度提示。
3）App打开速度测试，速度是否可观。
4）App页面间的切换是否流畅，逻辑是否正确

5）注册
--同表单编辑页面
--用户名密码长度
--注册后的提示页面
--前台注册页面和后台的管理页面数据是否一致
--注册后，在后台管理中页面提示

6）登录
--使用合法的用户登录系统。
--系统是否允许多次非法的登陆，是否有次数限制。
--使用已经登陆的账号登陆系统是否正确处理。
--使用禁用的账号登陆系统是否正确处理。
--用户名、口令（密码）错误或漏填时能否登陆。
--删除或修改后的用户，原用户登陆。
--不输入用户口令和用户、重复点（确定或取消按钮）是否允许登陆。
--登陆后，页面中登陆信息。
--页面中有注销按钮。
--登陆超时的处理。

7）注销
--注销原模块，新的模块系统能否正确处理。
--终止注销能否返回原模块，原用户。
--注销原用户，新用户系统能否正确处理。
--使用错误的账号、口令、无权限的被禁用的账号进行注销

2.4.2应用的前后台切换
1) APP切换到后台，再回到  app，检查是否停留在上一次操作界面。
2)  APP切换到后台，再回到  app，检查功能及应用状态是否正常，IOS4和   IOS5的版本的处
理机制有的不一样。
3) app切换到后台，再回到前台时，注意程序是否崩溃，功能状态是否正常，尤其是对于从
后台切换回前台数据有自动更新的时候。
4)手机锁屏解屏后进入    app注意是否会崩溃，功能状态是否正常，尤其是对于从后台切换
回前台数据有自动更新的时候。
5)当   App使用过程中有电话进来中断后再切换到   app，功能状态是否正常
6)当杀掉   app进程后，再开启  app，app能否正常启动。
7)出现必须处理的提示框后，切换到后台，再切换回来，检查提示框是否还存在，有时候
会出现应用自动跳过提示框的缺陷。
8)对于有数据交换的页面，每个页面都必需要进行前后台切换、锁屏的测试，这种页面最容易出现崩溃。

 2.4.3免登录
很多应用提供免登录功能，当应用开启时自动以上一次登录的用户身份来使用app.
1) app有免登录功能时，需要考虑IOS版本差异。
2)考虑无网络情况时能否正常进入免登录状态。
3)切换用户登录后，要校验用户登录信息及数据内容是否相应更新，确保原用户退出。
4)根据MTOP的现有规则，一个帐户只允许登录一台机器。所以，需要检查一个帐户登录多
台手机的情况。原手机里的用户需要被踢出，给出友好提示。
5) app切换到后台，再切回前台的校验
6)切换到后台，再切换回前台的测试
7)密码更换后，检查有数据交换时是否进行了有效身份的校验
8)支持自动登录的应用在进行数据交换时，检查系统是否能自动登录成功并且数据操作无
误。
9)检查用户主动退出登录后，下次启动app，应停留在登录界面

2.4.4数据更新
根据应用的业务规则，以及数据更新量的情况，来确定最优的数据更新方案。
1)需要确定哪些地方需要提供手动刷新，哪些地方需要自动刷新，哪些地方需要手动+自动
刷新。
2)确定哪些地方从后台切换回前台时需要进行数据更新。
3)根据业务、速度及流量的合理分配，确定哪些内容需要实时更新，哪些需要定时更新。
4)确定数据展示部分的处理逻辑，是每次从服务端请求，还是有缓存到本地，这样才能有
针对性的进行相应测试。
5)检查有数据交换的地方，均有相应的异常处理。

2.4.5离线浏览
很多应用会支持离线浏览，即在本地客户端会缓存一部分数据供用户查看。
1)在无网络情况可以浏览本地数据
2)退出   app再开启  app时能正常浏览
3)切换到后台再切回前台可以正常浏览
4)锁屏后再解屏回到应用前台可以正常浏览
5)在对服务端的数据有更新时会给予离线的相应提示

2.4.6 App更新
1)当客户端有新版本时，有更新提示。
 2)当版本为非强制升级版时，用户可以取消更新，老版本能正常使用。用户在下次启动    app
时，仍能出现更新提示。
3)当版本为强制升级版时，当给出强制更新后用户没有做更新时，退出客户端。下次启动
app时，仍出现强制升级提示。
4)当客户端有新版本时，在本地不删除客户端的情况下，直接更新检查是否能正常更新。
5)当客户端有新版本时，在本地不删除客户端的情况下，检查更新后的客户端功能是否是
新版本。
6)当客户端有新版本时，在本地不删除客户端的情况下，检查资源同名文件如图片是否能
正常更新成最新版本。如果以上无法更新成功的，也都属于缺陷。

2.4.7定位、照相机服务
1) App有用到相机，定位服务时，需要注意系统版本差异
2)有用到定位服务、照相机服务的地方，需要进行前后台的切换测试，检查应用是否正常。
3)当定位服务没有开启时，使用定位服务，会友好性弹出是否允许设置定位提示。当确定
允许开启定位时，能自动跳转到定位设置中开启定位服务。
4)测试定位、照相机服务时，需要采用真机进行测试。

2.4.8时间测试
客户端可以自行设置手机的时区、时间，因此需要校验该设置对 app的影响。
--中国为东 8区，所以当手机设置的时间非东  8区时，查看需要显示时间的地方，时间是否展示正确，应用功能是否正常。
时间一般需要根据服务器时间再转换成客户端对应的时区来展示，这样的用户体验比较好。比如发表一篇微博在服务端记录的是  10：00，此时，华盛顿时间为 22：00，客户端去浏览时，如果设置的是华盛顿时间,则显示的发表时间即为  22:00,当时间设回东 8区时间时，再查看则显示为  10：00。

2.4.9 PUSH测试
1)检查   push消息是否按照指定的业务规则发送
2)检查不接受推送消息时，检查用户不会再接收到    push.
3)如果用户设置了免打扰的时间段，检查在免打扰时间段内，用户接收不到 PUSH。在非免打扰时间段，用户能正常收到 push。
4)当push消息是针对登录用户的时候，需要检查收到的   push与用户身份是否相符，没有错误地将其它人的消息推送过来。一般情况下，只对手机上最后一个登录用户进行消息推送。
5)测试push时，需要采用真机进行测试。

 2.5性能测试
评估App的时间和空间特性：
1)极限测试：在各种边界压力情况下，如电池、存储、网速等，验证App是否能正确响应。
--内存满时安装  App
--运行 App时手机断电
--运行 App时断掉网络

2)响应能力测试：测试App中的各类操作是否满足用户响应时间要求。
--App安装、卸载的响应时间
--App各类功能性操作的影响时间
3)压力测试：反复/长期操作下、系统资源是否占用异常。
--App反复进行安装卸载，查看系统资源是否正常
--其他功能反复进行操作，查看系统资源是否正常

4)性能评估：评估典型用户应用场景下，系统资源的使用情况。
5)Benchmark测试（基线测试）：与竞争产品的Benchmarking,产品演变对比测试等。

2.6交叉事件测试
针对智能终端应用的服务等级划分方式及实时特性所提出的测试方法。交叉测试又叫事件或冲突测试，是指一个功能正在执行过程中，同时另外一个事件或操作对该过程进行干扰的测试。

如；App在前/后台运行状态时与来电、文件下载、音乐收听等关键运用的交互情况测试等。交叉事件测试非常重要，能发现很多应用中潜在的性能问题。

1）多个 App同时运行是否影响正常功能
2）App运行时前/后台切换是否影响正常功能
3）App运行时拨打/接听电话
4）App运行时发送/接收信息
5）App运行时发送/收取邮件
6）App运行时切换网络（2G、3G、wifi）
7）App运行时浏览网络
8）App运行时使用蓝牙传送/接收数据
9）App运行时使用相机、计算器等手机自带设备

2.7兼容测试
主要测试内部和外部兼容性
1）与本地及主流App是否兼容
2）基于开发环境和生产环境的不同，检验在各种网络连接下(WiFi、GSM、GPRS、EDGE、WCDMA、
CDMA1x、CDMA2000、HSPDA等)，App的数据和运用是否正确
3）与各种设备是否兼容，若有跨系统支持则需要检验是否在各系统下，各种行为是否一致

--不同操作系统的兼容性，是否适配
--不同手机屏幕分辨率的兼容性
--不同手机品牌的兼容性

 2.8回归测试
1）Bug修复后且在新版本发布后需要进行回归测试。
2）Bug修复后的回归测试在交付前、要进行全量用例的回归测试。

2.9升级、更新测试
新版版发布后，配合不同网络环境的自劢更新提示及下载、安装、更新、启劢、运行的验证
测试。
1）测试升级后的功能是否与需求说明一样
2）测试与升级模块相关的模块的功能是否与需求一致
3）升级安装意外情况的测试（如死机、断电、重启）
4）升级界面的 UI测试
5）不同操作系统间的升级测试

2.10用户体验测试
以主观的普通消费者的角度去感知产品或服务的舒适、有用、易用、友好亲切程度。通过
不同个体、独立空间和非经验的统计复用方式去有效评价产品的体验特性
升产品的潜在客户满意度。
1）是否有空数据界面设计，引导用户去执行操作。
2）是否滥用用户引导。
3）是否有不可点击的效果，如：你的按钮此时处于不可用状态，那么一定要灰掉，或者拿掉按钮，否则会给用户误导
4）菜单层次是否太深
5）交互流程分支是否太多
6）相关的选项是否离得很远
7）一次是否载入太多的数据
8）界面中按钮可点击范围是否适中
9）标签页是否跟内容没有从属关系，当切换标签的时候，内容跟着切换
10）操作应该有主次从属关系
11）是否定义 Back的逻辑。涉及软硬件交互时，Back键应具体定义
12）是否有横屏模式的设计，应用一般需要支持横屏模式，即自适应设计

2.11 硬件环境测试
2.11.1手势操作测试
1）手机开锁屏对运行中的 App的影响
2）切换网络对运行中的 App的影响
3）运行中的 App前后台切换的影响
4）多个运行中的 App的切换
5）App运行时关机
6）App运行时重启系统
7）App运行时充电
8）App运行时kill掉进程再打开

2.11.2网络环境
手机的网络目前主要分为2G、3G、wifi。目前2G的网络相对于比较慢，测试时尤其要注意此
块的测试。

1)无网络时，执行需要网络的操作，给予友好提示，确保程序不出现crash。
2)内网测试时，要注意选择到外网操作时的异常情况处理。
3)在网络信号不好时，检查功能状态是否正常，确保不因提交数据失败而造成crash。
4)在网络信号不好时，检查数据是否会一直处于提交中的状态，有无超时限制。如遇数据
交换失败时要给予提示。
5)在网络信号不好时，执行操作后，在回调没有完成的情况下，退出本页面或者执行其他
操作的情况，有无异常情况。此问题也会经常出现程序crash。

2.11.3服务器宕机或出现  404、502等情况下的测试
后台服务牵涉到 DNS、空间服务商的情况下会影响其稳定性，如：当出现域名解析故障时，
你对后台 API的请求很可能就会出现  404错误，抛出异常。这时需要对异常进行正确的处
理，否则可能会导致程序不能正常工作。

2.12接口测试
服务端一般会提供JSON格式的数据给客户端，所以我们在服务端需要进行接口测试，确保
服务端提供的接口并转换的JSON内容正确，对分支、异常流有相应的返回值。此块测试可
以采用itest框架进行测试。最方便的是采用httpclient进行接口测试。
进行服务端测试时，需要开发提供一份接口文档。

2.13客户端数据库测试
1）一般的增、删、改、查测试。
2）当表不存在时是否能自动创建，当数据库表被删除后能否再自建，数据是否还能自动从
服务端中获取回来并保存。
3 ）在业务需要从服务端取回数据保存到客户端的时候，客户端能否将数据保存到本地。
4）当业务需要从客户端取数据时，检查客户端数据存在时，app数据是否能自动从客户端
数据中取出，还是仍然会从服务器端获取？检查客户端数据不存在时，app数据能否自动从
服务器端获取到并保存到客户端
5 ）当业务对数据进行了修改、删除后，客户端和服务端是否会有相应的更新。