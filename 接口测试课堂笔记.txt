接口测试流程（接口测试是在开发的联调测试之后，集成测试之前）
1.接口需求调研（调研接口的功能、什么协议、返回值、响应参数）（接口协议、接口功能、接口数据流转、接口的加解密方式、接口的范围）
2.接口测试工具选择
3.接口测试计划（时间、人力、范围）
4.接口测试用例编写（功能、性能、安全）
5.接口测试执行（使用工具执行测试、提接口测试bug【接口位置、响应、参数、数据库层变化】、回归）
6.接口测试回归
7.接口自动化持续集成（持续集成环境构建、邮件、报告）

接口八问：
1.接口请求地址？
2.接口作用？
3.请求方式？
4.是否是用户相关？
5.接口是否存在上送数据，上送数据是什么？
6.返回的报文头和编码？
7.状态码？
8.返回报文体？

接口测试质量评估标准
1.业务功能覆盖是否完整？
2.业务规则覆盖是否完整？
3.参数验证是否达到要求（边界、业务规则）
4.接口异常场景覆盖是否完整
5.所有参数是否覆盖
6.覆盖率是否达到要求
7.代码覆盖率是否达到要求
8.性能指标是否满足要求
9.安全指标是否满足要求

什么是接口？
接口不准确的理解成是与资源打交道，这个资源可以是本系统也可以是其他系统
测试后端实现是否符合接口规范
举个例子：假如我们开发一个bug管理系统，该系统需要拿到公司所有开发和测试人员的信息
  这样员工就可以不用注册都可以登录进去，那么人员信息存储在哪里呢？一般存储在hr系统里面。
  我们要到hr系统中拿到人员信息，获取hr系统中的人员资源。怎么拿？拿的方式有很多种。
  可以直接把hr系统的数据库拷贝一份放到bug管理系统里，不过这样不好，因为数据的同步会有点麻烦；
  还可以直接连hr系统的数据库去查，这样也不太好，这样我们就需要了解hr系统的数据存储结构和逻辑，
  一旦hr系统的数据字段发生改变，bug管理系统也要去改，以便同步。
  比较好的做法是hr系统暴露一些接口，通过接口获取，这样bug系统就不需要关心hr系统的数据存储实现
这些接口可能是这样的：
  登录的接口，提供人员的用户名和密码，去hr系统中判断该人员是否存在，
  如果存在验证用户名和密码，如果验证通过就返回1个token，该token就是这个人员的通行证，
  通过token可以登录到bug管理系统中去；
  获取人员信息的接口，返回该人员的职位：测试还是开发，以及用户名，昵称等信息；

为什么做接口测试？为了程序安全、效率
接口测试实际上是黑盒测试
作为黑盒测试，基本的测试思路通过输入和输出判断被测系统或者对象的逻辑
接口测试大部分内容是数据，通过数据的对比，我们能推测到系统和产品的逻辑，测接口就是测逻辑
接口中的返回相对单纯，不像web页面，html代码中有太多ui的东西，ui最不稳定，变化太快
接口相对稳定一点点，但是里面的干扰信息更少，断言相对容易很多。

接口测试分类
web接口测试（BS架构）
   服务器接口测试：测试公司实现的接口
   第三方接口测试：测试别的公司实现的接口
模块接口测试（CS架构）

业内常用的接口自动化框架：
RobotFramework
Jmeter
TestNG+HttpClient

接口测试用例怎么写？
3a原则
A: arrange 初始化测试数据，就是造数据，这里的数据有我们输入的数据，也有目标接口所涉及的资源
比如hr系统中的用户信息，我们必须先有几条人员的详细信息才能去测获取人员信息的接口
（当然只是正常的流程，我们有时候还需要清掉数据以便测试资源为空的情况）；
A: act 调用接口，传入输入数据；
A: assert 断言， 对返回的资源信息进行断言
比如获取用户信息的接口返回了用户信息之后，我们要判断返回的用户是不是我们想要的那个用户
我们获取的是李雷的信息，接口如果返回韩梅梅，那么接口的逻辑就是不对的；

为什么要接口测试？
1、节约时间，缩短项目书时间
2、提高工作效率
3、提高系统健壮性

利用postman在接口地址信息输入地址信息点击发送服务端返回数据转为Jason形式查看
用fiddler获取接口地址
接口分类（http）：post、get、delete、put

post和get的区别：
1、post请求的数据放在WebForm里面以表单形式提交，get数据放在地址栏里
2、get地址栏有大小限制，所以post提交的数据大
3.get用户信息放在地址栏，post放在表单比较安全

接口测试流程：
1、设计用例（功能、逻辑业务、异常1.参数异常2.数据异常、安全1.关键字）
2、需求讨论
3、需求评审
4、场景设计
5、数据准备
6、执行

为什么设计测试用例？
理清思路，避免漏测
提高测试效率
跟进测试进度
告诉领导做过什么
跟进重复性工作

用例设计：
功能用例设计：1、功能是否正常 2、功能是否按照接口文档实现
逻辑用例设计：是否依赖业务
异常测试用例测试：
1、参数异常 1.关键字参数 2.参数为空 3.多、少参数 4.错误参数
2、数据异常 1。关键字数据 2.数据为空 3.长度不一致 4.错误数据
安全测试用例设计：1、cookie 2、header 3、唯一识别码

接口测试工具：提高工作效率
fiddler（运用和原理）
postman（post\get接口实战）
wireshark
soapui
python、php（接口自动化）
loadrunner（接口性能）
httprequester
JMeter（接口性能）

按照时间、简易层度、业务复杂度、测试员能力选择测试工具
抓取接口：
1、httpwatch：缺点是只能在IE和Firefox浏览器里的插件，看数据比较麻烦
2、wireshark：经过电脑的所有请求都会抓取，看数据比较麻烦
3、fiddler：抓取http请求
测试接口：
1、loadrunner：能进行性能测试和接口测试
2、fiddler
3、soapui
4、JMeter：可以性能测试也可以接口测试
5、postman

fiddler的运用：
查看接口请求数据
查看请求数据、响应数据
接口返回状态（200/404/504）
设置代理
header、cookie
设置断点
添加筛选
接口测试

postman的运用：
能够添加header 和cookie
各种类型接口测试
按需求添加cookie、header
操作记录清晰
多接口一起使用
方便回归
提高技能水平

python-get-接口实战：
定义接口地址
定义请求数据
整理请求数据
发送数据并获取结果

实践代码文件名：test.py
# _*_ coding:utf8 _*_
import urllib
import urllib2
#测试URL地址
url = "http://reg.haibian.com/login/ajax_login"
#定义请求数据并对数据进行赋值
data = {}
data['loginname']='XXX'
data['password']='111'#把密码111进行MD5加密填入单引号
#对请求数据进行编码
data = urllib.urlencode(data)
#将数据和URL进行连接
request = url+'?'+data
#打开请求，获取对象
requestResponse = urllib2.urlopen(request)
#读取服务端返回数据
ResponseStr = requestResponse.read()
#打印数据
ResponseStr = ResponseStr.decode("unicode_escape")
print(ResponseStr)

接口测试面试题：
1、做接口测试当请求参数多时tps下降明显，此接口根据参数从redis中获取数据，每个参数与redis交互
一次，当一组参数是tps5133，五组参数是tps1169，多次交互影响了处理性能，请详细阐述如何改进增进
效果的方案？
参考答案：tps就是吞吐量，tps下降可能是因为频繁访问redis，而频繁访问redis的原因是参数过多
         解决的思路是：减少参数。我们可以把多组参数变成json字符串之类的一个参数，从而达到
         信息量不减少而参数个数减少的效果。

2、接口的加密测试中对称加密与非对称加密有什么区别？
参考答案：对称加密: 信息交换的双方使用同一个密钥加密解密，就像是用同一把钥匙开一把锁
         非对称加密：公开密钥加密（英语：Public-key cryptography），也称为非对称加密（英语：
         asymmetric cryptography），是密码学的一种算法，它需要两个密钥，一个是公开密钥，另一
         个是私有密钥；一个用作加密的时候，另一个则用作解密。使用其中一个密钥把明文加密后所得
         的密文，只能用相对应的另一个密钥才能解密得到原本的明文；甚至连最初用来加密的密钥也不
         能用作解密。由于加密和解密需要两个不同的密钥，故被称为非对称加密；不同于加密和解密都
         使用同一个密钥的对称加密。虽然两个密钥在数学上相关，但如果知道了其中一个，并不能凭此
         计算出另外一个；因此其中一个可以公开，称为公钥，任意向外发布；不公开的密钥为私钥，必
         须由用户自行严格秘密保管，绝不通过任何途径向任何人提供，也不会透露给要通信的另一方，
         即使他被信任。
         基于公开密钥加密的特性，它还提供数字签名的功能，使电子文件可以得到如同在纸本文件上
         亲笔签署的效果。

3、请详细阐述接口测试和UI测试在测试活动中如何协同测试？
参考答案：UI与接口测试的协同可以从下面的方向考虑
          UI的操作实际上就是用另一种方式调用接口，那么接口有多少种参数组合就要求UI用例要构造
          多少种操作进行调用；
          UI操作所需要的数据可以用接口来生成；
          接口测试可以保证数据和逻辑的准确性，UI测试需要考虑交互和界面展示的逻辑正确性；
          UI测试需要重视接口调用不成功或者接口异常情况下UI的呈现方式和用户体验；
          UI中可能会有一些状态的缓存信息（这样就不需要每次频繁调用接口去获取了），比如鉴权信
          息等，需要重点关注这些缓存的更新策略；

4、在手工接口测试或者自动化接口测试的过程中，上下游接口有数据依赖如何处理？
参考答案：上下游接口的数据依赖无非就是准备测试数据。
          假如一个事务需要顺序调用3个接口，A B C， C依赖于AB， 而AB有数据依赖，这时候就需要
          准备好A和B的数据。
          数据一般有两种方式生成
          动态方式：假如B依赖A创造的数据，那么每次执行B之前必须执行A去做数据创建
          静态方式：独立统一的测试数据库, ABC需要的数据都可以从库里拿到

5、依赖于第三方数据的接口如何进行测试？
参考答案：可以使用SoapUI等工具直接调用第三方数据接口的

6、接口测试中依赖登录状态的接口如何测试？


7、http接口测试和web Service接口测试区别是什么？


8、设计接口测试用例时，涉及的是电商系统，其中包括很多修改，如商品、商家、店铺等等，针对这些数
据的修改，会涉及到很多参数，如商品名称，商品的尺码，商品的颜色等等。那么设计实现“修改”接口时
如何确定要传哪些参数？是只需要传我要修改的参数，还是全部参数都要传？



9、目前接口文档是由word格式管理，因迭代快，产生很多文档，分不清哪些是不用的接口，哪些是正在用
的接口，哪些是更新后的接口，文档杂乱，另外因是word文档格式管理，不方便查询，如何管理？每次查看
接口文档需要下载多个word文档，不能避免下载查看的操作，效率不高，如何提高工作效率？


10、请给出下列案例的伪代码（python代码）
登录过程：
1.IP/auth/negotiate？key=... key内容是string，随机生成AES密钥，并用RSA公钥加密
2.服务器返回token，通过正则表达式提取token
3.IP/auth/negotiate？token=$（token）&mobile...&password...&sessionkey...后面内容加密

接口自动化框架：MRAutoSpace
环境搭建：https://www.imooc.com/video/15081

postman常见断言语句：
//返回状态码200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//返回body包括文本内容
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("string_you_want_to_search");
});
//jsonData字段值是否等于100
pm.test("Your test name", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.value).to.eql(100);
});
//响应body中等于指定string
pm.test("Body is correct", function () {
    pm.response.to.have.body("response_body_string");
});
//检查Content-Type是否包含在header返回
pm.test("Content-Type is present", function () {
    pm.response.to.have.header("Content-Type");
});
//响应时间小于200ms
pm.test("Response time is less than 200ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(200);
});
//检查成功post的请求status code
pm.test("Successful POST request", function () {
    pm.expect(pm.response.code).to.be.oneOf([201,202]);
});
pm.test("Status code name has string", function () {
    pm.response.to.have.status("Created");
});
var jsonObject = xml2Json(responseBody);