正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为"元字符"）。
正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。
一、常用元字符
语法 描述
d	 匹配数字
s	 匹配任意不可见字符(空格、换行符、制表符等),等价于[]
w	 匹配任意Unicode字符集,包括字母、数字、下划线、汉字等
.	 匹配除换行符外的任意字符
^或A 匹配字符串或行的起始位置
$或Z 匹配字符串或行的结束位置

二、限定词（量词）
语法  描述
*	  重复零次或更多次
+     重复一次或更多次
?	  重复零次或一次
{n}	  重复n次
{n,}  重复n次或更多次
{n,m} 重复n到m次

三、常用反义词
语法   描述
B 	   匹配非单词的开始或结束
D 	   匹配非数字
S 	   匹配任意可见字符，[^]
W 	   匹配任意非Unicode字符集
[^abc] 除a、b、c以外的任意字符

四、字符族
语法          描述
[abc]         a、b或c
[^abc]        除a、b、c以外的任意字符
[a-zA-Z]      a到z或A到Z
[a-d[m-p]]    a到d或m到p，即[a-dm-p](并集)
[a-z&&[def]]  d、e或f(交集)
[a-z&&[^bc]]  a到z，除了b和c:[ad-z](减去)
[a-z&&[^m-p]] a到z，减去m到p:[a-lq-z](减去)

实例
从字符串str中提取出数字部分的内容（匹配一次）
var str = "abc123def";
var patt1 = /[0-9]+/;
document.write(str.match(patt1));
以下标记的文本是获得的匹配的表达式：
123

匹配以数字开头，并以 abc 结尾的字符串。：
var str = "123abc";
var patt1 = /^[0-9]+abc$/;
document.write(str.match(patt1));
以下标记的文本是获得的匹配的表达式：
123abc

像 data(\w)?\.dat 这样的模式将查找下列文件：
data.dat
data1.dat
data2.dat
datax.dat
dataN.dat

^[0-9]+abc$
^为匹配输入字符串的开始位置
[0-9]+匹配多个数字，[0-9]匹配单个数字，+匹配一个或多个
abc$匹配字符abc并一abc结尾，$为匹配输入字符串的结束位置

^[a-z0-9_-]{3,15}$
^开始标记
匹配字母（a-z）数字（0-9）下划线_连字符
3~15个字符的长度
$结束标记

正则语法
1.非打印字符
非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：
字符	描述
\cx	匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
\f	匹配一个换页符。等价于 \x0c 和 \cL。
\n	匹配一个换行符。等价于 \x0a 和 \cJ。
\r	匹配一个回车符。等价于 \x0d 和 \cM。
\s	匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。
\S	匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
\t	匹配一个制表符。等价于 \x09 和 \cI。
\v	匹配一个垂直制表符。等价于 \x0b 和 \cK。
2.特殊字符
就是一些有特殊含义的字符，如上面说的 runoo*b 中的 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 \: runo\*ob 匹配 runo*ob。
特别字符	描述
$			匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。
( )			标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。
*			匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。
+			匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。
.			匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。
[			标记一个中括号表达式的开始。要匹配 [，请使用 \[。
?			匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。
\			将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。
^			匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。
{			标记限定符表达式的开始。要匹配 {，请使用 \{。
|			指明两项之间的一个选择。要匹配 |，请使用 \|。
3.限定符
限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。
正则表达式的限定符有：
字符	描述
*		匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
+		匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
?		匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 、 "does" 中的 "does" 、 "doxy" 中的 "do" 。? 等价于 {0,1}。
{n}		n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
{n,}	n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
{n,m}	m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。
以下正则表达式匹配一个正整数，[1-9]设置第一个数字不是 0，[0-9]* 表示任意多个数字：
/[1-9][0-9]*/
*、+ 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。
贪婪：下面的表达式匹配从开始小于符号 (<) 到关闭 h1 标记的大于符号 (>) 之间的所有内容。如：
<h1>RUNOOB-菜鸟教程</h1>
使用正则：
/<.*>/
结果：
<h1>RUNOOB-菜鸟教程</h1>
非贪婪：如果您只需要匹配开始和结束 h1 标签，下面的非贪婪表达式只匹配 <h1>。
使用正则：
/<.*?>/或者/<\w+?>/
结果：<h1>
4.定位符
字符	描述
^		匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。
$		匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。
\b		匹配一个单词边界，即字与空格间的位置。
\B		非单词边界匹配。
注意：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。
